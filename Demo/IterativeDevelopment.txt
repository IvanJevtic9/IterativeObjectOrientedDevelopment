
	Summary

Section1:

- In this opening module we have defined the requirements for a sample application
  Then, we have applied the principles of iterative development to implement the requirements

- You can rely on iterative development when implementing an algorithm
  or when implementing the straight-forward code all the same

- The idea behind it is that any development can be split into iterations
  and every iteration broken down into even smaller iterations
  The goal of the game is to reach such small, limited iterations
  that it takes only a line or two of code to implement them

- Every piece of code which is iteratively added to the code base is there to implement one tiny requirement
  As long as that requirement stays intact, the corresponding piece of code will remain correct

- Requirements rarely remain intact, They change over time
  New ones come, old ones change, evolve or disappear
  How will the code built with principles of iterative development in mind survive these changes?
  That remains to be seen, and that is precisely what we will be dealing with in the next module

- The goal of the module to come will be to figure the deficiencies of the current implementation
  to fix the issues and try to implement more customer’s requirements

Section2: 

- The previous module has left us with an implementation which looked like a program that works
  In this module, we have tried to live with that code, and to maintain it
  That included adding more features, fixing bugs and trying to improve performance
  The truth is that this module was suffering all the way through
  The program which fails to obey principles of good object-oriented design is hard to maintain

- It is hard to add new features to it
  I used a lot of copy-paste to add more behavior, which is plain wrong
  It is hard to change the implementation when elements are not decoupled,
  because every single change is modifying several things simultaneously

- Again, due to the lack of separation between elements of the design,
  I was utterly unable to modify the algorithm when I found the performance bottleneck
 All the way through, I was constantly suffering due to the lack of proper abstractions

- Whatever abstractions I could find in the NET Framework and apply to my design,
  all of them turned to be misplaced, and they eventually caused a lot of damage to clarity and extensibility of my code
  So, those are the issues that have been identified this far

- Bad design consists of no decoupling, tangled implementation of the algorithm, and missing abstractions
  That will be the approach known as Emergent Design

- It sits on top of the iterative development, which I was applying constantly throughout this demonstration
  But it adds the designing effort to every iteration, no matter how small or isolated it might be
  One step at the time, a well-thought-out design will emerge

- The application will be able to do whatever it is doing right now
  But it will suddenly become maintainable

Section 3

- In this module, we have tackled the question of designing the code as it grows iteratively
  That approach has its challenges, and you have only seen some of them in this demonstration
  You have learned that code should be developed in terms of abstractions 
  where each abstraction is named after the need we have and exposed in form which is useful to the consumer

- Whether it be an interface, or an abstract, or even a concrete class, or, why not tell
  a member function on the same class which consumes it the concept we need must be readily available and easy to consume

- As more and more features are added, you will notice that infrastructural, general concepts
  have become part of your code where only domain-related logic would be expected
 
- That is the state of the application which we have reached so far
  Some parts were good, some others not so good
  What I consider not good at this stage, is that there is a lot of infrastructural code
  mixed with proper domain-related code

Section 4:

- In this module, you have learned the benefits of organizing operations into stages
  and letting each stage transform state into a new state
  Once that is done, you will be able to compose different stages into a pipeline
  which performs a complex operation without risking that any of the separate stages will fail
  The situation is simple, as every stage is only concerned of doing one task

- The risk of introducing a defect is significantly reduced that way
  you can even view the entire program as one giant pipeline
  A good approach is to group related operations into smaller pipelines and to give them a meaningful name
  That would be about all when it comes to separating complex operations into linear stages

- Domain-related code should be kept separate
  Not only that these two are addressing distinct problems but having them mixed together

Section 5:

- we have laid foundations to emergent algorithm design, algorithms can easily be organized into a pipeline
  by splitting them into stages that are performing isolated well-defined transformations to the input data

- there is a more general structure of algorithms
  where each algorithm is a thin wrapper around a smaller
  more focused subordinate algorithm

- This onion-like organization of behavior is letting you mix and match behaviors
  and operators and turn them into tremendously complex features

- At the same time, this organization lets you reuse inner parts in separate behaviors
  or even replace them at run-time for various reasons
  That is the flexibility you don't get with traditional
  monolithic implementation of business algorithms

Section 6:

- we have pushed algorithm design one step deeper in direction of growing details
  we have seen how an algorithm implementation can be matched with use cases supported by that implementation

- I have speculated that there is a relationship between designing an algorithm iteratively and adding use cases iteratively
  On both accounts, my intention is to add simple items first and then extend the design in direction of more complex items

- In that light, I would start from the use cases and identify layers, or nested ranges of use cases
  where there is a clean notion of simple versus complex use cases
  Then I translate this scheme to the behavior design
  which is the function responsible for all these use cases

- The order of use cases is leading the development iterations which, at the end
  will leave me with the entire complex function fully implemented

- There was one more issue that had to be addressed with this development style
  I have advised that every development iteration should be followed by a cleanup iteration
  he purpose of this step is to group and move classes, remove duplicated code
  nd make other small changes, in order to keep your entire solution clean and simple

Section 7: